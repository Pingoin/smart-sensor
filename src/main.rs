#![no_std]
#![no_main]
#![feature(c_variadic)]
#![feature(const_mut_refs)]

use esp32c3_hal as hal;

use embedded_svc::ipv4::{Interface, Ipv4Addr, Mask, Subnet};

use bme280_multibus::{Bme280, Sample};
use esp_backtrace as _;
use esp_println::logger::init_logger;
use esp_println::println;
use esp_wifi::wifi::utils::create_network_interface;
use esp_wifi::wifi_interface::Network;
use esp_wifi::{create_network_stack_storage, network_stack_storage};
use esp_wifi::{current_millis, initialize};
use hal::clock::{ClockControl, CpuClock};
use hal::i2c::I2C;
use hal::IO;
use hal::{pac::Peripherals, prelude::*, Delay, Rtc};
use serde_json_core::ser;
use smoltcp::wire::Ipv4Address;

use hal::system::SystemExt;
use riscv_rt::entry;

mod networking;
mod mqtt;

/// This configuration is picked up at compile time by `build.rs` from the
/// file `cfg.toml`.
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
    #[default("")]
    wifi_ip: &'static str,
    #[default("")]
    wifi_gateway: &'static str,
    #[default("")]
    mqtt_broker: &'static str,
    #[default("hello/world")]
    mqtt_topic: &'static str,
}

#[entry]
fn main() -> ! {
    init_logger(log::LevelFilter::Info);
    esp_wifi::init_heap();

    let peripherals = Peripherals::take().unwrap();

    let mut system = peripherals.SYSTEM.split();

    let clocks = ClockControl::configure(system.clock_control, CpuClock::Clock160MHz).freeze();

    let mut rtc = Rtc::new(peripherals.RTC_CNTL);

    // Initialize the Delay peripheral, and use it to toggle the LED state in a
    // loop.
    let mut delay = Delay::new(&clocks);
    rtc.rwdt.disable();

    let mut storage = create_network_stack_storage!(3, 8, 1, 1);
    let ethernet = create_network_interface(network_stack_storage!(storage));
    let mut wifi_interface = esp_wifi::wifi_interface::Wifi::new(ethernet);

    use hal::systimer::SystemTimer;
    let syst = SystemTimer::new(peripherals.SYSTIMER);
    initialize(syst.alarm0, peripherals.RNG, &clocks).unwrap();

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    networking::connect_wifi(
        &mut wifi_interface,
        &mut delay,
        app_config.wifi_ssid.into(),
        app_config.wifi_psk.into(),
    );

    // wait for getting an ip address
    println!("Wait to get an ip address");
    let mut network = Network::new(wifi_interface, current_millis);
    network
        .set_iface_configuration(&embedded_svc::ipv4::Configuration::Client(
            embedded_svc::ipv4::ClientConfiguration::Fixed(embedded_svc::ipv4::ClientSettings {
                ip: Ipv4Addr::from(parse_ip(app_config.wifi_ip)),
                subnet: Subnet {
                    gateway: Ipv4Addr::from(parse_ip(app_config.wifi_gateway)),
                    mask: Mask(24),
                },
                dns: None,
                secondary_dns: None,
            }),
        ))
        .unwrap();

    println!("Start bus loop on main");

    let mut rx_buffer = [0u8; 1536];
    let mut tx_buffer = [0u8; 1536];
    let mut socket = network.get_socket(&mut rx_buffer, &mut tx_buffer);

    let io = IO::new(peripherals.GPIO, peripherals.IO_MUX);
    // Create a new peripheral object with the described wiring
    // and standard I2C clock speed
    let i2c = I2C::new(
        peripherals.I2C0,
        io.pins.gpio0,
        io.pins.gpio1,
        100u32.kHz(),
        &mut system.peripheral_clock_control,
        &clocks,
    );
    // initialize the BME280 using the primary I2C address 0x76
    let mut bme = Bme280::from_i2c(i2c, bme280_multibus::i2c::Address::SdoGnd).unwrap();

    const SETTINGS: bme280_multibus::Settings = bme280_multibus::Settings {
        config: bme280_multibus::Config::reset()
            .set_standby_time(bme280_multibus::Standby::Millis1000)
            .set_filter(bme280_multibus::Filter::X16),
        ctrl_meas: bme280_multibus::CtrlMeas::reset()
            .set_osrs_t(bme280_multibus::Oversampling::X8)
            .set_osrs_p(bme280_multibus::Oversampling::X8)
            .set_mode(bme280_multibus::Mode::Normal),
        ctrl_hum: bme280_multibus::Oversampling::X8,
    };
    bme.settings(&SETTINGS).unwrap();

    loop {
        socket.work();

        socket
            .open(
                Ipv4Address::from_bytes(&parse_ip(app_config.mqtt_broker)),
                1883,
            )
            .unwrap();

mqtt::connect(&mut socket);
        let mut sample: Sample = bme.sample().unwrap();
        sample.pressure = sample.pressure / 100.0;
        println!(
            "time= {};p={}; T= {};H= {}",
            current_millis() / 1000,
            sample.pressure,
            sample.temperature,
            sample.humidity
        );
        let mut payload = [0u8; 200];
        let mut payload_len = 0usize;
        match ser::to_slice(&sample, &mut payload) {
            Ok(len) => payload_len = len,
            Err(err) => {
                println!("{}", err);
            }
        }

        println!();

  mqtt::publish(&mut socket,app_config.mqtt_topic,  &payload[..payload_len]);

        socket.disconnect();

        let wait_end = current_millis() + 5 * 1000;
        while current_millis() < wait_end {
            socket.work();
        }
    }
}

fn parse_ip(ip: &str) -> [u8; 4] {
    let mut result = [0u8; 4];
    for (idx, octet) in ip.split(".").into_iter().enumerate() {
        result[idx] = u8::from_str_radix(octet, 10).unwrap();
    }
    result
}
